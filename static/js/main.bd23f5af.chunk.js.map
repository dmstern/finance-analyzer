{"version":3,"sources":["Spending.ts","Categorizer.tsx","index.tsx"],"names":["categories","grocery","key","label","matchPattern","furniture","eat","cash","drugStore","elektronics","bus","vape","train","fun","shopping","shoes","charity","pharmacy","bike","other","Spending","rawJson","Object","classCallCheck","this","notInSaldo","bookedDate","billDate","description","amount","category","values","parseFloat","replace","parseDate","catecorize","_i","_Object$values","length","match","input","parts","year","parseInt","month","day","Date","Categorizer","props","_this","possibleConstructorReturn","getPrototypeOf","call","render","tableRows","sum","_Object$keys","keys","state","monthlyAvarage","tr","react","className","Math","round","push","onSubmit","handleSubmit","htmlFor","onChange","handleChange","name","id","cols","rows","type","checked","hasHeadline","handleHeadlineChange","value","delimiter","handleDelimiterChange","bind","assertThisInitialized","aggregated","csvInput","spendings","event","_this2","csv","noheader","fromString","then","rawSpendings","map","spending","setState","analayzeData","preventDefault","target","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","categoryAmount","err","return","monthRange","getTime","_i2","_Object$keys2","React","rootElement","document","getElementById","Categorizer_Categorizer"],"mappings":"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","file":"static/js/main.bd23f5af.chunk.js","sourcesContent":["interface SpendingRaw {\n  \"Umsatz abgerechnet und nicht im Saldo enthalten\": string;\n  Wertstellung: string;\n  Belegdatum: string;\n  Beschreibung: string;\n  \"Betrag (EUR)\": string;\n}\n\ninterface Category {\n  key: string,\n  label: string;\n  matchPattern: RegExp;\n}\n\nexport const categories : {\n  [key: string]: Category;\n} = {\n  grocery: {\n    key: 'grocery',\n    label: \"Supermarkt\",\n    matchPattern: /Aldi|Lidl|Real|Rewe|Tegut/gi\n  },\n  furniture: {\n    key: 'furniture',\n    label: \"Einrichtung\",\n    matchPattern: /Ikea/gi\n  },\n  eat: {\n    key: 'eat',\n    label: \"Auswärts Essen\",\n    matchPattern: /Vapiano|BACKWERK|Starbucks|Fodoora|Deliveroo|gastronomie/gi\n  },\n  cash: {\n    key: 'cash',\n    label: \"Bar-Abhebung\",\n    matchPattern: /Cash|Bankhaus|Transact|GUERSOYBERLIN|Sparkasse/gi\n  },\n  drugStore: {\n    key: 'drugStore',\n    label: \"Drogerie\",\n    matchPattern: /Drogerie|Rossmann|Mueller/gi\n  },\n  elektronics: {\n    key: 'elektronics',\n    label: \"Elektronik\",\n    matchPattern: /electro|press|galeria/gi\n  },\n  bus: {\n    key: 'bus',\n    label: \"Nahverkehr\",\n    matchPattern: /LOGPAYFINAN35314369001|BVGBERLIN/gi\n  },\n  vape: {\n    key: 'vape',\n    label: \"Dampfen\",\n    matchPattern: /FAN-TASTICBERLIN|AVORIA|Vapango/gi\n  },\n  train: {\n    key: 'train',\n    label: \"Fernverkehr\",\n    matchPattern: /DB Bahn|flix/gi\n  },\n  fun: {\n    key: 'fun',\n    label: \"Freizeit\",\n    matchPattern: /ENTERTAINMENT|BLOC/gi\n  },\n  shopping: {\n    key: 'shopping',\n    label: \"Internetkäufe und Anschaffungen\",\n    matchPattern: /thalia|amz|amazon\\.de|etsy|tchibo|primark|nanu nana/gi\n  },\n  shoes: {\n    key: 'shoes',\n    label: \"Schuhe\",\n    matchPattern: /deichmann/gi\n  },\n  charity: {\n    key: 'charity',\n    label: \"Spende\",\n    matchPattern: /LEETCHI|CHANGE\\.ORG/gi\n  },\n  pharmacy: {\n    key: 'pharmacy',\n    label: \"Apotheke\",\n    matchPattern: /apotheke/gi\n  },\n  bike: {\n    key: 'bike',\n    label: \"Fahrad\",\n    matchPattern: /rad/gi\n  },\n  other: {\n    key: 'other',\n    label: \"Sonstiges\",\n    matchPattern: /.*/gi\n  }\n}\n;\n\nexport default class Spending {\n  notInSaldo: boolean;\n  bookedDate: Date;\n  billDate: Date;\n  description: string;\n  amount: number;\n  category: Category;\n\n  constructor(rawJson: SpendingRaw) {\n    const values = Object.values(rawJson);\n    this.amount = parseFloat(values[4].replace(',', '.'));\n    this.bookedDate = this.parseDate(values[1]);\n    this.billDate = this.parseDate(values[2]);\n    this.description = values[3];\n    this.notInSaldo = values[0] === \"Ja\";\n    this.category = this.catecorize();\n  }\n\n  private catecorize(): Category {\n    for (const category of Object.values(categories)) {\n      if (this.description.match(category.matchPattern)) {\n        return category;\n      }\n    }\n    return categories.other;\n  }\n\n  parseDate(input: string): Date {\n    var parts = input.match(/(\\d+)/gi);\n    var year = parts ? parseInt(parts[2], 10) : 1900;\n    var month = parts ? parseInt(parts[1], 10) - 1 : 1;\n    var day = parts ? parseInt(parts[0], 10) : 1;\n    return new Date(year, month, day);\n  }\n}\n","import * as React from \"react\";\nimport { FormEvent } from \"react\";\nimport * as csv from \"csvtojson\";\nimport Spending, { categories } from \"./Spending\";\n\ninterface State {\n  csvInput: string;\n  spendings: Spending[];\n  delimiter: string;\n  aggregated: {\n    [key: string]: number;\n  };\n  monthlyAvarage: {\n    [key: string]: number;\n  };\n  hasHeadline: boolean;\n}\n\nexport default class Categorizer extends React.Component<{}, State> {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelimiterChange = this.handleDelimiterChange.bind(this);\n    this.handleHeadlineChange = this.handleHeadlineChange.bind(this);\n    this.state = {\n      delimiter: \",\",\n      aggregated: {},\n      csvInput: \"\",\n      spendings: [],\n      monthlyAvarage: {},\n      hasHeadline: true\n    };\n  }\n\n  handleSubmit(event: FormEvent) {\n    csv\n      .default({\n        noheader: !this.state.hasHeadline\n      })\n      .fromString(this.state.csvInput)\n      .then(rawSpendings => {\n        const spendings = rawSpendings.map(spending => new Spending(spending));\n        this.setState({ spendings });\n        this.analayzeData();\n      });\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({ csvInput: event.target.value });\n  }\n\n  handleDelimiterChange(event) {\n    this.setState({ delimiter: event.target.value });\n  }\n\n  handleHeadlineChange(event) {\n    this.setState({ hasHeadline: event.target.checked });\n  }\n\n  analayzeData() {\n    const aggregated = {};\n    const monthlyAvarage = {};\n\n    for (const spending of this.state.spendings) {\n      if (spending.amount < 0) {\n        const key = spending.category.key;\n        const amount = spending.amount * -1;\n        const categoryAmount = aggregated[key];\n        aggregated[key] =\n          categoryAmount !== undefined ? categoryAmount + amount : 0;\n      }\n    }\n\n    const timeRange =\n      this.state.spendings[0].bookedDate.getTime() -\n      this.state.spendings[\n        this.state.spendings.length - 1\n      ].bookedDate.getTime();\n    const dayRange = timeRange / 1000 / 60 / 60 / 24;\n    const monthRange = dayRange / 30;\n\n    for (const key of Object.keys(aggregated)) {\n      monthlyAvarage[key] = aggregated[key] / monthRange;\n    }\n\n    this.setState({ aggregated, monthlyAvarage });\n  }\n\n  render = () => {\n    const tableRows: JSX.Element[] = [];\n    let sum: number = 0;\n    for (const key of Object.keys(this.state.monthlyAvarage)) {\n      const amount = this.state.monthlyAvarage[key];\n      sum += amount;\n      const tr = (\n        <tr key={key}>\n          <td className=\"label\">\n            <strong>{categories[key].label}</strong>\n          </td>\n          <td className=\"amount\">{Math.round(amount * 100) / 100} €</td>\n        </tr>\n      );\n      tableRows.push(tr);\n    }\n    tableRows.push(\n      <tr key=\"sum\">\n        <td className=\"label\">\n          <strong>Gesamt</strong>\n        </td>\n        <td className=\"amount\">\n          <strong>{Math.round(sum * 100) / 100} €</strong>\n        </td>\n      </tr>\n    );\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <span>\n            <label htmlFor=\"csvInput\">\n              <p>Hier den CSV-Inhalt der Ausgaben einfügen:</p>\n            </label>\n            <textarea\n              onChange={this.handleChange}\n              name=\"csvInput\"\n              id=\"csvInput\"\n              cols={100}\n              rows={10}\n            />\n          </span>\n          <span>\n            <label htmlFor=\"headline\">Enthält Kopfzeile</label>\n            <input\n              type=\"checkbox\"\n              name=\"headline\"\n              id=\"headline\"\n              checked={this.state.hasHeadline}\n              onChange={this.handleHeadlineChange}\n            />\n          </span>\n          <span>\n            <label htmlFor=\"delimiter\">Trennzeichen: </label>\n            <input\n              id=\"delimiter\"\n              value={this.state.delimiter}\n              onChange={this.handleDelimiterChange}\n            />\n          </span>\n          <span>\n            <button type=\"submit\">Analysieren</button>\n          </span>\n        </form>\n        <div className=\"result\">\n          <h3>Durchschnittliche monatliche Ausgaben:</h3>\n          <table>\n            <tbody>{tableRows}</tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport \"./styles.css\";\nimport Categorizer from \"./Categorizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Categorizer />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}