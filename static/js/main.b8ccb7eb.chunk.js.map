{"version":3,"sources":["Months.ts","Spending.ts","Categorizer.tsx","index.tsx"],"names":["Months","Spending","rawJson","Object","classCallCheck","this","notInSaldo","bookedDate","billDate","description","amount","category","values","parseFloat","replace","parseDate","catecorize","_i","_Object$values","categories","length","match","matchPattern","other","input","parts","year","parseInt","month","day","Date","grocery","key","label","furniture","eat","cash","drugStore","elektronics","bus","vape","train","fun","shopping","shoes","charity","pharmacy","bike","Categorizer","props","_this","possibleConstructorReturn","getPrototypeOf","call","amountify","Math","round","render","react","onSubmit","handleSubmit","htmlFor","onChange","handleChange","name","id","cols","rows","type","checked","state","hasHeadline","handleHeadlineChange","value","delimiter","handleDelimiterChange","isCalculated","className","months","map","index","parseMonth","entries","monthlySpendings","_ref","_ref2","slicedToArray","average","monthlyAverage","concat","monthlySums","sum","reduce","a","b","bind","assertThisInitialized","aggregated","csvInput","spendings","date","_date$split","split","_date$split2","event","_this2","csv","noheader","fromString","then","spendingRows","spending","setState","analayzeData","preventDefault","target","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","getFullYear","getMonth","categoryAmount","monthlySpending","includes","push","err","return","_Object$keys","keys","React","rootElement","document","getElementById","Categorizer_Categorizer"],"mappings":"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","file":"static/js/main.b8ccb7eb.chunk.js","sourcesContent":["export enum Months {\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'Mai',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Okt',\n  'Nov',\n  'Dec',  \n};\n","interface SpendingRaw {\n  \"Umsatz abgerechnet und nicht im Saldo enthalten\": string;\n  Wertstellung: string;\n  Belegdatum: string;\n  Beschreibung: string;\n  \"Betrag (EUR)\": string;\n}\n\ninterface Category {\n  key: string,\n  label: string;\n  matchPattern: RegExp;\n}\n\nexport default class Spending {\n  notInSaldo: boolean;\n  bookedDate: Date;\n  billDate: Date;\n  description: string;\n  amount: number;\n  category: Category;\n\n  static categories : {\n    [key: string]: Category;\n  } = {\n    grocery: {\n      key: 'grocery',\n      label: \"Supermarkt\",\n      matchPattern: /Aldi|Lidl|Real|Rewe|Tegut/gi\n    },\n    furniture: {\n      key: 'furniture',\n      label: \"Einrichtung\",\n      matchPattern: /Ikea/gi\n    },\n    eat: {\n      key: 'eat',\n      label: \"Auswärts Essen\",\n      matchPattern: /Vapiano|BACKWERK|Starbucks|Fodoora|Deliveroo|gastronomie/gi\n    },\n    cash: {\n      key: 'cash',\n      label: \"Bar-Abhebung\",\n      matchPattern: /Cash|Bankhaus|Transact|GUERSOYBERLIN|Sparkasse/gi\n    },\n    drugStore: {\n      key: 'drugStore',\n      label: \"Drogerie\",\n      matchPattern: /Drogerie|Rossmann|Mueller/gi\n    },\n    elektronics: {\n      key: 'elektronics',\n      label: \"Elektronik\",\n      matchPattern: /electro|press|galeria/gi\n    },\n    bus: {\n      key: 'bus',\n      label: \"Nahverkehr\",\n      matchPattern: /LOGPAYFINAN35314369001|BVGBERLIN/gi\n    },\n    vape: {\n      key: 'vape',\n      label: \"Dampfen\",\n      matchPattern: /FAN-TASTICBERLIN|AVORIA|Vapango/gi\n    },\n    train: {\n      key: 'train',\n      label: \"Fernverkehr\",\n      matchPattern: /DB Bahn|flix/gi\n    },\n    fun: {\n      key: 'fun',\n      label: \"Freizeit\",\n      matchPattern: /ENTERTAINMENT|BLOC/gi\n    },\n    shopping: {\n      key: 'shopping',\n      label: \"Internetkäufe und Anschaffungen\",\n      matchPattern: /thalia|amz|amazon\\.de|etsy|tchibo|primark|nanu nana/gi\n    },\n    shoes: {\n      key: 'shoes',\n      label: \"Schuhe\",\n      matchPattern: /deichmann/gi\n    },\n    charity: {\n      key: 'charity',\n      label: \"Spende\",\n      matchPattern: /LEETCHI|CHANGE\\.ORG/gi\n    },\n    pharmacy: {\n      key: 'pharmacy',\n      label: \"Apotheke\",\n      matchPattern: /apotheke/gi\n    },\n    bike: {\n      key: 'bike',\n      label: \"Fahrad\",\n      matchPattern: /rad/gi\n    },\n    other: {\n      key: 'other',\n      label: \"Sonstiges\",\n      matchPattern: /.*/gi\n    }\n  }\n\n  constructor(rawJson: SpendingRaw) {\n    const values = Object.values(rawJson);\n    this.amount = parseFloat(values[4].replace(',', '.'));\n    this.bookedDate = this.parseDate(values[1]);\n    this.billDate = this.parseDate(values[2]);\n    this.description = values[3];\n    this.notInSaldo = values[0] === \"Ja\";\n    this.category = this.catecorize();\n  }\n\n  private catecorize(): Category {\n    for (const category of Object.values(Spending.categories)) {\n      if (this.description.match(category.matchPattern)) {\n        return category;\n      }\n    }\n    return Spending.categories.other;\n  }\n\n  parseDate(input: string): Date {\n    var parts = input.match(/(\\d+)/gi);\n    var year = parts ? parseInt(parts[2], 10) : 1900;\n    var month = parts ? parseInt(parts[1], 10) - 1 : 1;\n    var day = parts ? parseInt(parts[0], 10) : 1;\n    return new Date(year, month, day);\n  }\n}\n","import * as React from \"react\";\nimport { FormEvent } from \"react\";\nimport * as csv from \"csvtojson\";\nimport Spending from \"./Spending\";\nimport { Months } from \"./Months\";\n\ninterface State {\n  csvInput: string;\n  spendings: Spending[];\n  delimiter: string;\n  aggregated: {\n    [key: string]: number;\n  };\n  monthlyAverage: {\n    [key: string]: number;\n  };\n  monthlySpendings: {\n    [key: string]: {\n      [key: string]: number;\n    };\n  };\n  monthlySums: {\n    [key: string]: number;\n  };\n  isCalculated: boolean;\n  months: string[];\n  hasHeadline: boolean;\n}\n\nexport default class Categorizer extends React.Component<{}, State> {\n  parseMonth(date: string): React.ReactNode {\n    const [year, month] = date.split('-');\n    return `${Months[month]} / ${year}`;\n  }\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelimiterChange = this.handleDelimiterChange.bind(this);\n    this.handleHeadlineChange = this.handleHeadlineChange.bind(this);\n\n    this.state = {\n      delimiter: \",\",\n      aggregated: {},\n      csvInput: \"\",\n      spendings: [],\n      monthlyAverage: {},\n      monthlySpendings: {},\n      monthlySums: {},\n      months: [],\n      hasHeadline: true,\n      isCalculated: false\n    };\n  }\n\n  handleSubmit(event: FormEvent) {\n    csv\n      .default({\n        delimiter: this.state.delimiter,\n        noheader: !this.state.hasHeadline\n      })\n      .fromString(this.state.csvInput)\n      .then(spendingRows => {\n        const spendings = spendingRows.map(spending => new Spending(spending));\n        this.setState({ spendings });\n        this.analayzeData();\n      });\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({ csvInput: event.target.value });\n  }\n\n  handleDelimiterChange(event) {\n    this.setState({ delimiter: event.target.value });\n  }\n\n  handleHeadlineChange(event) {\n    this.setState({ hasHeadline: event.target.checked });\n  }\n\n  analayzeData() {\n    const aggregated = {};\n    const monthlyAverage = {};\n    const monthlySpendings = {};\n    const months: string[] = [];\n    const monthlySums = {};\n\n    for (const spending of this.state.spendings) {\n      if (spending.amount < 0) {\n        const category = spending.category.key;\n        const amount = spending.amount * -1;\n        const month = `${spending.bookedDate.getFullYear()}-${spending.bookedDate.getMonth()}`;\n        const categoryAmount = aggregated[category];\n        const monthlySpendingCategory = monthlySpendings[category];\n\n        if (!monthlySpendingCategory) {\n          monthlySpendings[category] = {};\n        }\n\n        const monthlySpending = monthlySpendings[category][month];\n\n        if (!months.includes(month)) {\n          months.push(month);\n        }\n\n        monthlySums[month] = monthlySums[month]\n          ? amount + monthlySums[month]\n          : amount;\n\n        aggregated[category] = categoryAmount\n          ? categoryAmount + amount\n          : amount;\n\n        monthlySpendings[category][month] = monthlySpending\n          ? monthlySpending + amount\n          : amount;\n      }\n    }\n\n    for (const category of Object.keys(aggregated)) {\n      monthlyAverage[category] = aggregated[category]\n        ? aggregated[category] / months.length\n        : 0;\n    }\n\n    this.setState({\n      isCalculated: true,\n      aggregated,\n      monthlyAverage,\n      monthlySpendings,\n      months,\n      monthlySums\n    });\n  }\n\n  amountify = (amount: number) => {\n    return Math.round(amount * 100) / 100;\n  };\n\n  render = () => {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <span>\n            <label htmlFor=\"csvInput\">\n              <p>Hier den CSV-Inhalt der Ausgaben einfügen:</p>\n            </label>\n            <textarea\n              onChange={this.handleChange}\n              name=\"csvInput\"\n              id=\"csvInput\"\n              cols={100}\n              rows={10}\n            />\n          </span>\n          <span>\n            <label htmlFor=\"headline\">Enthält Kopfzeile</label>\n            <input\n              type=\"checkbox\"\n              name=\"headline\"\n              id=\"headline\"\n              checked={this.state.hasHeadline}\n              onChange={this.handleHeadlineChange}\n            />\n          </span>\n          <span>\n            <label htmlFor=\"delimiter\">Trennzeichen: </label>\n            <input\n              id=\"delimiter\"\n              value={this.state.delimiter}\n              onChange={this.handleDelimiterChange}\n            />\n          </span>\n          <span>\n            <button type=\"submit\">Analysieren</button>\n          </span>\n        </form>\n        {this.state.isCalculated && (\n          <div className=\"result\">\n            <h3>Monatliche Ausgaben (€):</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th className=\"label\">Category / Month</th>\n                  {this.state.months.map((month, index) => (\n                    <th key={index}>{this.parseMonth(month)}</th>\n                  ))}\n                  <th className=\"average\">Average</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {Object.entries(this.state.monthlySpendings).map(\n                  ([category, monthlySpendings]) => {\n                    const average = this.state.monthlyAverage[category];\n\n                    return (\n                      <tr key={category}>\n                        <th className=\"label\">\n                          {Spending.categories[category].label}\n                        </th>\n                        {this.state.months.map(month => (\n                          <td className=\"amount\" key={`${category}-${month}`}>\n                            {monthlySpendings[month]\n                              ? this.amountify(monthlySpendings[month])\n                              : 0}\n                          </td>\n                        ))}\n                        <td className=\"amount average\">\n                          {this.amountify(average)}\n                        </td>\n                      </tr>\n                    );\n                  }\n                )}\n\n                <tr key=\"sum\">\n                  <td className=\"label\">\n                    <strong>Gesamt</strong>\n                  </td>\n\n                  {Object.values(this.state.monthlySums).map((sum, index) => (\n                    <td className=\"amount sum\" key={index}>\n                      {this.amountify(sum)}\n                    </td>\n                  ))}\n\n                  <td className=\"amount sum average\">\n                    <strong>\n                      {this.amountify(\n                        Object.values(this.state.monthlyAverage).reduce(\n                          (a, b) => a + b\n                        )\n                      )}\n                    </strong>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport \"./styles.css\";\nimport Categorizer from \"./Categorizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Categorizer />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}